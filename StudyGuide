Subversion
Study Guide

1) Git vs Svn - What are the differences between git and svn?
Git is a distributed VCS whereas svn is centralized. This means that svn works under a single repository that team members would checkout files from, rather than from several potential locations. Additionally, several things are different in svn, such as it has less complex branch and merge tools and it has no complex staging requirements - instead relying on add, remove, and commit commands.

2) Commiting to svn - How are commits handled in svn?
To commit files in svn, you simply type 'svn commit' with an optional '-m "<MEMO>"' line. Without the memo line, you will be taken to a screen to enter your memo, and with it svn's commit is a single line operation. No staging of files is necessary as updates to existing files are automatically tracked and marked for update.

3) Checking out svn - How are check outs performed in svn?
Checkouts can be performed in svn by typing "svn co $REPO $LOCAL"  where $REPO is the location of the centralized repository and $LOCAL is the location of where you wish your local working copy to be kept in your filesystem (Or potentially on another server, etc.). You can omit the $LOCAL to have the working copy placed automatically in a folder in the current directory, or you can specify specific files to check out by naming them. You can also check out specific revisions with the -rX flag, where X is the revision number you wish to checkout.

4) Bring me my .svn! - How do you create the local working environment with svn (the .svn direc-tory)?
You create the .svn directory by performing a checkout.

5) Adding to the chaos - How do you add files to the repository?
You add files to the repository with 'svn add' followed by the files, or 'svn add *' to add all files in the directory to the repository at once. 

6) Itâ€™s like a tree - How are branches handled in svn?
Brances are not as well-defined in svn as they are in git. In order to create a branch, you must first copy the existing trunk copy to a new project folder. The name of the folder is typically the name of the branch.

7) or maybe a forest - How many branches can you have at any given time?
That depends: How big is the project and how much storage space do you have? There is no arbitrary limit, only what you yourself are limited to in terms of resources and patience.

8) Working copy - What does your local copy of a repository look like with svn?
Exactly like the central repository, with the exception of any changes you have made since the last update/commit.

9) Status - How do you check the status of the files you are presently working on?
'svn status' with an optional '$FILENAME' afterward for a specific file

10) Life of a branch - How long are branches in svn supposed to exist?
Until you reintegrate them. It's common practice to reintegrate branches during a final merge, however if you are still working on a specific problem that needs to remain separate from the trunk, there's no arbitrary limit.

11) Taping it together - How do you merge branches?
With 'svn merge' or 'svn merge --reintegrate'. It would be wise to run an 'svn update' before the merge to ensure everything is up to date. After the merge, you must then commit the merge to the trunk by running a final 'svn commit'.

12) We see a need! - Why was svn created?
Svn was created to more easily manage large projects involving a centralized repository by making it as simple to use as possible.

13) A day in the life of svn - What is a typical svn workflow?
Start with an 'svn update'
Work on local files.
Commit to central repository with 'svn commit'

14) What were they thinking?! - What was the design criteria for svn?
Svn was intended to be as simple to use as possible. This allows for a great flexibility in project management by allowing users to essentially branch off files locally rather than through the repository, and allowing for a vast amount of tools that are suited for a generalized workflow rather than one specific method.

15) Time machine - How do we view the past of a project with svn?
You can check out past revisions by performing a checkout and specifying the revision and optionally a file in particular to look at. The command is 'svn co -r$X $OPTFILE' where $X is the revision number and $OPTFILE is the optional filename(s) to checkout.

16) Great Scott! - If there was a mistake made in the past of a project, how should we go about
correcting that mistake in svn?
Just make a new commit fixing the past mistake rather than trying to erase it from existence by messing with the history of the project (This can cause a large amount of problems, particularly in group projects where things can suddenly break inexplicably).

17) The initial upload - If you have an existing project and want to start tracking it with svn, how
do you copy your existing files to the repository the first time? Does this
create the .svn directory in your local folder?

18) Local SVN - Can the client/server setup required with svn exist on the same computer?
Absolutely, just specify a local file location rather than a remote URL when setting up the svnadmin side.

19) For the admins - Did SVN provide any difference in tools between how you do server side
commands and client side commands?
